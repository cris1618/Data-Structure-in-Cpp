#+TITLE: Array concatenation using VLA Parameters
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: CSC 240 - Data Structures with C++ - Lyon College, Fall'24
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> :results output

* Problem Description
Define a function to concatenate two arrays =a= and =b= into a third array =c=
using Variable-Length Array (VLA) parameters. The sizes of =a= and =b= are 
determined at runtime, and the function should copy both arrays 
successively int =c=.

* Code
** Standard code
#+begin_src C
  // Function prototype
  // Name: concat
  // Purpose: concatenate two arrays.
  // Returns:  integer array 
  // Parameters:
  // int m  = size first array.
  // int n = size second array.
  // int a[m] = VLA array.
  // int b[n] = VLA array.
  // int c[m+n] = Third array (concatenation)
  void concat(int m, int n, int a[m], int b[n], int c[m+n]);

  int main(){
    int m = 3;
    int n = 2; 
    int a[] = {3,4,5};
    int b[] = {4,5};
    int c[m+n];

    printf("Array a: ");
    for(int i = 0; i<m; i++)
      printf("%d ", a[i]);

    printf("\nArray b: ");
    for(int i = 0; i<n; i++)
      printf("%d ", b[i]);

    concat(m, n, a, b, c);

    printf("\nConcatenated array c: ");
    for(int i = 0; i<m+n; i++)
      printf("%d ", c[i]);

    return 0;
  }

  void concat(int m, int n, int a[m], int b[n], int c[m+n]){
    int i = 0;
    for(i = 0; i<=n; i++)
      c[i] = a[i];
    for(int j = 0; j<=m; j++, i++)
      c[i] = b[j];
  }
#+end_src

#+RESULTS:
: Array a: 3 4 5 
: Array b: 4 5 
: Concatenated array c: 3 4 5 4 5

** Bonus (Compound literals)
#+begin_src C 
  // Function prototype
  // Name: concat
  // Purpose: concatenate two arrays.
  // Returns:  integer array 
  // Parameters:
  // int m  = size first array.
  // int n = size second array.
  // int a[m] = VLA array.
  // int b[n] = VLA array.
  // int c[m+n] = Third array (concatenation)
  void concat(int m, int n, int a[m], int b[n], int c[m+n]);

  int main(){
    int m = 3;
    int n = 2; 
    int c[m+n];

    // Call the function using Compound literals
    concat(m, n,(int[]){1,2,3}, (int[]){4,5}, c);

    printf("\nConcatenated array c: ");
    for(int i = 0; i<m+n; i++)
      printf("%d ", c[i]);

    return 0;
  }

  void concat(int m, int n, int a[m], int b[n], int c[m+n]){
    int i = 0;
    for(i = 0; i<=n; i++)
      c[i] = a[i];
    for(int j = 0; j<=m; j++, i++)
      c[i] = b[j]; 
  }


#+end_src

#+RESULTS:
: Concatenated array c: 1 2 3 4 5

* Reflection
At the beginning, I was confused by the =int= return type of the function, 
therefore I used the =void= return type (more suitable in this case, in my 
opinion). Anyway, I could also have left the function with an =int= return type 
and simply returned 0 at the end of the function. I didn't do any additional 
work here because I want to save a bit of time for the "big" project :-).
