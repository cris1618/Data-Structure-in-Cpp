#+TITLE: Functions
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: CSC 240 - Data Structures with C++ - Lyon College, Fall'24
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output

** Function prototypes & arguments vs. parameters
*** Warmup program
#+begin_src C :results output
  #define SIZE 6
  float a[SIZE] = {1.0, 3.0, 2.5, 3.0, 4.0, 3.0};
  int count = 0;
  printf("Reverse order: ");
  for(int i = SIZE -1; i>=0; i--){
    if(a[i] == 3.0){
      count += 1;
    }
    printf("%g ", a[i]);
   }

  printf("\nCount: %d", count);
#+end_src

#+RESULTS:
: Reverse order: 3 4 3 2.5 3 1 
: Count: 3

*** Functions prototypes
#+begin_src C :results output :main no
  // Function prototype
  int add(int, int);

  int add(int a, int b){
    return a+b;
  }

  int main(void){
    int x = 1, y = 748;

    int addition = add(x, y);
    printf("Addition: %d", addition);
  }

#+end_src

#+RESULTS:
: Addition: 749

#+begin_src C :results output :main no
  // Hello world prototype
  void hello(void);

  // Print hello world with a function
  void hello(){
    puts("Hello, World!");
  }


  int main(){
    hello();
    return 0;
  }
#+end_src

#+RESULTS:
: Hello, World!

#+begin_src C
  // Broken version
  // Hello world prototype
  void hello(void);

  // Print hello world with a function (Wrong data Type)
  int hello(){
    puts("Hello, World!");
  }

  /*  int main(){
      hello();
      return 0;
      }
  ,*/

  // Arguments error
  int hello(int a){
    puts("Hello, World!");
  }

  //Function call error
  int main(){
    int a = 0;
    hello(a);
    return 0;
  }


#+end_src

#+RESULTS:

*** Function Documentation
#+begin_src C
  /**************************************************
   // Function: hello_world
   // Purpose: Prints "Hello, World!" to the console.
   // Returns: Void (no return value)
   // Parameters: void (no parameters)
   ,***************************************************/ 
#+end_src

#+begin_src C :main no
  // Function Prototypes
  int power(int, int);
  int pwer2(int, int);


  int main(){
    int a = 2, b = 3;
    printf("%d at the power of %d is: %d\n",a, b, power(a, b));
    printf("%d at the power of %d is: %d",a, b, power2(a, b));
    return 0;
  }

  int power(int x, int n){
    int i, result = 1;
    for(i=1; i<=n; i++){
      result = result * x;
    }
    return result;
  }

  int power2(int x, int n){
    int result = 1;
    while(n-- > 0)
      result = result * x;
    return result;
  }

#+end_src

#+RESULTS:
: 2 at the power of 3 is: 8
: 2 at the power of 3 is: 8

#+begin_src C :tangle power2.c :main no
  int power2(int x, int n){
    int result = 1;
    while(n-- > 0)
      result = result * x;
    return result;
  }
#+end_src
#+RESULTS:
** Recursive Fibonacci and factorial

#+begin_src C :results output 
  int factorial(int n){
    if(n==0)
      return 1;
    else 
      n = n * factorial(n-1);
    return n;
  }

  int fibonacci(int x){
    if(x == 0){
      return 0;
    }else if(x == 1){
      return 1;
    }else {
      return (fibonacci(x-1) + fibonacci(x-2));
    }
  }


  int main(){
    int n = 5;
    int x = 5;

    printf("The factorial of %d is: %d\n", n, factorial(n));
    printf("Fibonacci Sequence: ");
    for(int i = 0; i<x; i++)
      printf("%d ", fibonacci(i));
  }

#+end_src

#+RESULTS:
: The factorial of 5 is: 120
: Fibonacci Sequence: 0 1 1 2 3
** Pass arguments as reference (1d Arrays)
#+begin_src bash
echo 5 > sum_array
cat sum_array 
#+end_src

#+RESULTS:
: 5

#+begin_src C :main no :cmdline < sum_array
    int sum_array(int a[], int size){
      int sum = 0;
      for(int i = 0; i<size; i++)
        sum += a[i];
      return sum;
    }

    int main(){
      int size;
      scanf("%d", &size);
      int a[size];
    

      for(int i = 0; i<size; i++){
        a[i] = 1;
      }

      printf("Sum: %d", sum_array(a, size));
      return 0;
    }

#+end_src

#+RESULTS:
: Sum: 5

#+begin_src bash
  echo "5 1 1 1 1 1"  > sum_array
  cat sum_array 
#+end_src

#+RESULTS:
: 5 1 1 1 1 1

#+begin_src C :main no :cmdline < sum_array
  void print_array(int [], int);

  int main(){ 
    int size;
    int n;
    scanf("%d", &size);
    int a[size];

    for(int i = 0; i<size; i++){
      scanf("%d", &n);
      a[i] = n;
    }

    print_array(a, size);
    return 0;
  }


  void print_array(int a[], int size){
    printf("Array elements: ");
    for(int i = 0; i<size; i++){
      printf("%d ", a[i]);
    }
  }




#+end_src

#+RESULTS:
: Array elements: 1 1 1 1 1
