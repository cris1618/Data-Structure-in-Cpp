#+title: Strings
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> <string.h> <time.h> :results output :exports both :comments none :noweb yes
* DONE Exercises: Initializing String Variables

** Exercise 1: Basic Initialization

- Declare a character array called =greeting= with a length of 10 and
  initialize it with the string ="Hello"=. Use =printf= to print the
  string.

  #+begin_src C
    char greeting[10] = "Hello";
    printf("%s\n", greeting);
  #+end_src

  #+RESULTS:
  : Hello

** Exercise 2: Exact Fit without Null Character

- Declare a character array =month= with a length of 5 and initialize it
  with the string ="June"=. Print the string and observe the result.

- Modify the code to add a =\0= at the end of =month= and print it again.

  #+begin_src C
    char month[5] = "June";
    printf("%s\n", month);
  #+end_src

  #+RESULTS:
  : June

** Exercise 3: Overfilled Array

- Declare a character array =day= with length 3 and try initializing it
  with the string ="Mon"=. Print the array using =printf=.

  #+begin_src C
    char day[3] = "Mon";
    printf("%s\n", day);
  #+end_src

  #+RESULTS:
  : Mon

** Exercise 4: Using =sizeof= with Strings
- Declare =char name[] = "Student";=. Print the size of =name= using
  =sizeof= and compare it with the length of the string.

  #+begin_src C
    char name[] = "Student"; // Compiler substitute the length
    printf("%zu\n", sizeof(name)); // Considering \0
    printf("%d\n", strlen(name));
  #+end_src

  #+RESULTS:
  : 8
  : 7

* DONE Exercises: Character Arrays versus Character Pointers

** Exercise 5: String Array vs. Pointer Modification Attempt
- Declare =char message_a[] = "Welcome";= and =char *message_p =
  "Welcome";=.

- Try modifying the first character of each: =message_a[0] = 'w';= and
  =message_p[0] = 'w';=.

  #+begin_src C
    char message_a[] = "Welcome";
    char* message_p = "Welcome";
    message_a[0] = 'w';
    message_p[0] = 'w';
  #+end_src

  #+RESULTS:

** Exercise 6: Changing the Pointer Target

- Initialize two character arrays =char date1[] = "June 14";= and =char
  date2[] = "July 15";=.

- Declare a character pointer =char *p= and make it point to
  =date1=. Print the string using =p=, then change =p= to point to =date2= and
  print again.

  #+begin_src C
    char date1[] = "June 14";
    char date2[] = "July 15";
  
    char* p;
    p = date1;
    printf("%s\n", p);

    p = date2;
    printf("%s\n", p);
  #+end_src

  #+RESULTS:
  : June 14
  : July 15

** Exercise 7: Pointer Initialization and Dereferencing

- Declare a character array =char city[] = "Paris";= and a character
  pointer =char *ptr=.

- Initialize =ptr= to point to =city= and print the first character of
  =city= by dereferencing =ptr= with =*ptr= and =ptr[0]=.

  #+begin_src C
  char city[] = "Paris"; 
  char* ptr;

  ptr = city;
  printf("%c %c\n", *ptr, city[0]);
  #+end_src

  #+RESULTS:
  : P P

** Exercise 8: Uninitialized Pointer Error Simulation

- Declare a character pointer =char *uninitialized_ptr;=. Attempt to
  assign =uninitialized_ptr[0] = 'X';=.

  #+begin_src C
  char* uninitialized_ptr;
  uninitialized_ptr[0] = 'X'; // Undefined Behavior
  #+end_src

  #+RESULTS:

* DONE Exercises: Writing strings

** Exercise 9: Simple String Output

- *Problem*: Write a program that stores the string ="Learning C is
  fun!"= in a variable and prints it to the console.

- *Solution*:
  #+begin_src C
  char str[] = "Learning C is fun!";
  printf("%s\n", str);
  #+end_src

  #+RESULTS:
  : Learning C is fun!

** Exercise 10: Partial String Output

- *Problem*: Modify the previous program to only print the first 10
  characters of the string.

- *Solution*:
  #+begin_src C
    char str[] =  "Learning C is fun!";
    for(int i = 0; i<10; i++)
      printf("%c", str[i]);
  #+end_src

  #+RESULTS:
  : Learning C

** Exercise 11: String Formatting with Field Width
  - *Problem*: Use the string ="C programming"= and:
    1. Print only the first 5 characters in a field of width 8,
       right-aligned.
    2. Print only the first 5 characters in a field of width 8,
       left-aligned.
    3. Print a ruler (=|....|....|....|=) to check your results.

  - *Solution*:
    #+begin_src C
      char str[] = "C programming";
      puts("|....|....|....|");
      printf("%8.5s\n", str);
      printf("%-8.5s", str);
    #+end_src

    #+RESULTS:
    : |....|....|....|
    :    C pro
    : C pro

** Exercise 12: Safe String Input with fgets

- *Problem*: Write a program that reads a line of text using =fgets= and
  then prints it. Use the =:cmdline < strinput= header argument to
  stream the data to the program.

- String input:
  #+begin_src bash :results output
    echo "Hello" > strinput
    cat strinput
  #+end_src

  #+RESULTS:
  : Hello

- *Solution*:
  #+begin_src C :cmdline < strinput
    char str[6];
    fgets(str, sizeof(str), stdin);
    printf("%s", str);
  #+end_src

  #+RESULTS:
  : Hello

* DONE Exercises: Reading strings

** Exercise 13: Printing on new lines

- *Problem*: Write a program that stores ="Hello, C!"= in a string
  variable. Use a loop to print each character in the string on a
  new line.

- *Solution*:

  #+begin_src C
    char str[] = "Hello, C!";
    for(int i = 0; i<sizeof(str)-1; i++)
      printf("%c\n", str[i]);
  #+end_src

  #+RESULTS:
  : H
  : e
  : l
  : l
  : o
  : ,
  :  
  : C
  : !

** Exercise 11: Pointer Arithmetic in Strings

- *Problem*: Modify the =count_spaces= function to use pointer arithmetic
  instead of array indexing.
  
- *Solution*:
  #+begin_src C
    #include <stdio.h>

    int count_spaces(const char *s) {
      int count = 0;
      for(s; s < s + strlen(s); s++){
        if(*s == ' ')
          count++;
      }
      return count;
    }

    int main() {
      char str[] = "Can you count spaces?";
      printf("Spaces in \"%s\" = %d\n", str, count_spaces(str));
      return 0;
    }
  #+end_src

  #+RESULTS:
  : Spaces in "Can you count spaces?" = 3

** Exercise 12: Exploring scanf and Strings
- *Problem*: Write a program that reads a word using =scanf= and prints
  it. Modify the program to only allow up to 10 characters to be read.

- *Solution*:
#+begin_src bash 
  echo "helloooo" > hi
  cat hi
#+end_src

#+RESULTS:
: helloooo

#+begin_src C :cmdline < hi
  int main(){
    char str[10];

    scanf("%s", str);

    printf("%s", str);

  }
#+end_src

#+RESULTS:
: helloooo

* DONE Exercise: Pointer and string literal argument call

Modify =count_spaces= function call with pointer variable and with string literal.

- Function call with pointer variable:
  #+begin_src C
    int count_spaces(const char *s) // const prevents modification of
    // whatever s points to but not s itself
    {
      int count = 0;
      for ( ; *s != '\0'; s++) // no need for start index counter
        if (*s == ' ')
          count++;
      return count;
    }

    int main(void)
    {
      char* str = "Are we having fun?";
      // str decays to pointer to str[0] upon function call
      printf("Spaces in \"%s\" = %d\n", str, count_spaces(str));
      return 0;
    }
  #+end_src

  #+RESULTS:
  : Spaces in "Are we having fun?" = 3

- Function call with string literal:
  #+begin_src C
    int count_spaces(const char *s) // const prevents modification of
    // whatever s points to but not s itself
    {
      int count = 0;
      for ( ; *s != '\0'; s++) // no need for start index counter
        if (*s == ' ')
          count++;
      return count;
    }

    int main(void)
    {
      // str decays to pointer to str[0] upon function call
      printf("Spaces in \"%s\" = %d\n", "How are you?", count_spaces("How are you?"));
      return 0;
    }
  #+end_src

  #+RESULTS:
  : Spaces in "How are you?" = 2

 


