#+TITLE: Recursion (codealong I)
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 240 - Data structures with C++ - Lyon College, FA24
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:1 num:2 ^:nil
#+PROPERTY: header-args:C++ :main yes :includes <iostream> :results output :exports both :noweb yes
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> :results output :exports both :noweb yes
* Overview

- *Objectives:*
  + Compound literals to initialize arrays
  + Cast operators, lvalues and rvalues

* Variable-Length Array Parameters

- Variable-length arrays allow to state the length of an array in a
  function argument. They are most useful for multidimensional arrays.

- No direct link between =a= and =n=:
  #+begin_src C :results none
    int sum_array(int a[], int n) {
      // ...
    }
  #+end_src

- Create a "stack smashing error":
  #+begin_src C :results none
    void foo(int a[], int n){
      a[n] = 0;
    }

    int main(){
      int a[2] = {0};
      foo(a, 2); // if n = 2, array is out of bounds - stack smashing
    }
  #+end_src

- Using a variable-length array parameter, we can explicitly state that
  the length of ~a~ is ~n~:
  #+begin_src C :results none
    int sum_array(int n, int a[n]){
      // ...
    }
  #+end_src

  #+begin_src C :results none
    int sum_array(int a[n], int n){ // Not Legal
      //...
    }
  #+end_src
- But now the order of parameters is important: ~int n, int a[n]~ is OK,
  but ~int a[n], int n~ is illegal.

- *Practice:* Sum an array of length 10 without VLA (=sum_array=), and
  with VLA (=sum_array_vla=) then call the function with the values
  5,10,11 for n.
  #+begin_src C :main no :tangle vla.c
    int sum_array_vla(int n, int a[n]); // Variable-Length Array
    int sum_array(int a[], int n); // regular array

    int main(void)
    {
      int a[11] ={[0 ... 10]= 11};
      printf("vla: %d\n", sum_array_vla(11, a));
      printf("regular: %d ", sum_array(a, 11));
      return 0;
    }

    int sum_array_vla(int n, int a[n])
    {
      int i, sum=0;
      for (i=0;i<n;i++)
        sum+=a[i];
      return sum;
    }

    int sum_array(int a[], int n)
    {
      int i, sum=0;
      for (i=0;i<n;i++)
        sum+=a[i];
      return sum;
    }
  #+end_src

  #+RESULTS:
  : vla: 121
  : regular: 121

- What did you find out?
  #+begin_quote

  #+end_quote

- Two-dimensional arrays are not limited to fixed column numbers:
  complete the block to generate this output
  #+begin_example
  : 0 1 2 3
  : 1 2 3 4
  : 2 3 4 5
  : 3 4 5 6
  : Sum: 48
  #+end_example

- Code:
  #+begin_src C :main no
    int sum_array2(int n, int m, int a[n][m]);

    int main(void)
    {
      int n = 4  , m = 4  , i, j;
      int a[n][m];

      for(i=0;i<n;i++) {
        for(j=0;j<m;j++) {
          a[i][j]=i+j;
          printf("%d ",a[i][j]);
        }
        printf("\n");
      }
      printf("Sum: %d\n", sum_array2(n,m,a[n][m]));

      return 0;
    }

    int sum_array2(int n, int m, int a[n][m])
    {
      int i,j,sum=0;
      for(i=0;i<n;i++)
        for(j=0;j<m;j++)
          sum+=a[i][j];
      return sum;
    }
  #+end_src

  #+RESULTS:


: 0 1 2 3
: 1 2 3 4
: 2 3 4 5
: 3 4 5 6
: Sum: 48

- Using keyboard input: Complete the =scanf= statement, then test the
  code for n = m = 4 using the shell code block below.
#+begin_src bash
echo "4 4" > vlaa
cat vlaa

#+end_src

#+RESULTS:
: 4 4

  #+begin_src C :main no :tangle vlaSum.c :results silent :cmdline < vlaa
    int sum_two_dimensional_array(int n, int m, int a[n][m]);

    int main(void)
    {
      int n, m, i, j; // n x m array, loop variables i, j
      int a[n][m];

      printf("Enter number of rows and columns: ");
      scanf("%d%d" , &n, &m);

      for(i=0;i<n;i++) {
        for(j=0;j<m;j++) {
          a[i][j]=i+j;
          printf("%d ",a[i][j]);
        }
        printf("\n");
      }
      printf("Sum: %d\n", sum_two_dimensional_array(n, m, a));

      return 0;
    }

    int sum_two_dimensional_array(int n, int m, int a[n][m])
    {
      int i,j;
      int sum = 0;
      for(i=0;i<n;i++)
        for(j=0;j<m;j++)
          sum+=a[i][j];
      return sum;
    }
  #+end_src

- Testing:
  #+begin_src bash :results output
    gcc vlaSum.c -o val
    echo  "4 4"| ./val
  #+end_src

  #+RESULTS:

- Alternate ways to prototype VLA parameter functions:
  #+begin_src C :results none
    int func1(int n, int a[n]);
    int func2(int, int []);
    int func1(int n, int a[*]);
    int func1(int, int [*]);
  #+end_src

- VLA parameters can also be expressions to be evaluated:
  #+begin_src C :results none
    int concat(int m, int n, int a[m], int b[n], int c[m+n]);
  #+end_src

* The return statement
Example of a =return= statement in a =void= function
#+begin_src C :results output
  void print(int i){
    if (i<0)
      return;
    else
      printf("%d\n", i);
  }

  int main(){
    int n = -1;
    print(n);
    return 0;
  }
#+end_src

#+RESULTS:

* The exit function
#+begin_src bash :results outpit
  echo "100 200" > input
  cat input
#+end_src

#+RESULTS:
: 100 200

#+begin_src C :results output :cmdline < input :main no
  // define failure/success using stdlib macros
  #define FAILURE EXIT_FAILURE
  #define SUCCESS EXIT_SUCCESS

  int main(){
    int i, j;
    scanf("%d%d", &i, &j);
    // Print 0 or 1 depending on input values
    printf("%d", i > j ? SUCCESS : FAILURE);
    return 0;
  }



#+end_src

#+RESULTS:
: 1
* Recursion
Factorial Function with recursion
#+begin_src C 
  int factorial(int x){
    int result;
    if(x==0)
      return 1;
    else
      result = x * factorial(x-1);
  }

  int pow(int x, int n){
    int result;
    if(n==0)
      return 1;
    else
      result = x * pow(x, n-1);
    return result;
  }

  int main(){
    int n = 5;
    int ex = 2;
    int fact = factorial(n);
    printf("%d\n", fact);
    printf("%d", pow(n, ex));
    return 0;
  }
#+end_src

#+RESULTS:
: 120
: 25
